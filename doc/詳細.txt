	---------
全体タスク
---------
■画面レイアウトの設計
　■メニュー画面
　■問題画面の画面

□画面レイアウトの作成
　■メニュー画面
　□問題画面
　□結果画面
　　        BEST SCORE　SCORE
SCORE
MISS COUNT
TIME
　
□メニュー画面
　□問題画面へのジャンプ
　□近況の表示
　　
□問題画面
　□カウントダウン処理（１５秒待ち、答えが表示されなければ次の問題を表示）
　□スコアの評価を表示
　□スコアの保存
　□問題の表示
　□答え合わせ

--------------
プログラミング
--------------
＜画面の状態＞
・開始待ち：問題は非表示、開始ボタンだけが押せる状態
・解答中：解答を入力する状態、１５秒以内に解答しない場合、次の問題に移動する。
・終了：旧ベスト記録と今回の記録が表示される。
　　　　新記録を出した場合はその旨表示する。
　　　　もう一度問題をする（状態：解答中）にするか、メニューに移動するかのどちらかができる。

・画面起動時は、開始待ちの状態からスタートする。

＜状態：開始待ち＞

＜状態：解答中＞
□jsonファイルから、選択した地区の「都道府県コード」と「都道府県名」を取得する
□取得したデータをシャッフルする
□１件目の都道府県コードを問題文として表示する
□カウント開始･･･

□都道府県コードと都道府県名が一致した場合は、次の問題を表示する。
□都道府県コードと都道府県名が間違った場合は、画面に間違えた旨表示する。

□カウント終了（次の問題を表示する）

＜状態：終了＞
□今回の記録を表示する
スコア
□

---------
検討事項
---------
・判定基準とスコアランクはDB化せず、共通クラスの関数として実装する
（DB化したところで、データの整合性はとりずらいため）

・判定基準
GREAT：5秒以内
GOOD：10秒以内
BAD：15秒以内
POOR：15秒越える

・スコアランク算出方法
AAA  8/9以上
AA 7/9以上
A 6/9以上
B 5/9以上
C 4/9以上
D 3/9以上
E 2/9以上
F 2/9未満

JUST GREATを2点、GREATを1点、GOOD以下をすべて0点@beatmania wiki  
→Greadを2点、Goodを1点とする

・問題選択後は突然始まるか？
→タイムアタックなので、開始ボタンクリック後から開始させる
　開始ボタンはクリック後、非活性化させる

・共通関数用のファイルは作るのか？
→作る。メニューと問題でＤＢをそれぞれ呼び出す処理があるため。

・何を共通関数化するのか？
→ＤＢの初期設定


・問題順は毎回ランダムにする

・問題画面は、出題形式毎o共通？
→二種類の画面を設計しないと共通化の実現性が判断しずらい

・どのタイミングでスコアを表示するか？
→メニューの初期表示画面

・ボタンにALLがあってもよい
→なくてもイイ

・ランダムの内容が変わるのに、ランダムの評価が変わるのはどうなの？
→細かいことは気にしない、気にせずランダム

・評価の色は？
→弐寺と同じ

---------
テーブル
---------
play_log:CATCH UPで利用
&log_date,mode,target,score,rank, miss_count,


result:ランダム用
++id,mode,question,sec,miss_flag,log_date

